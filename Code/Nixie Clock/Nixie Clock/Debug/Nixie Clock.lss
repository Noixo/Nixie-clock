
Nixie Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000852  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00802000  00000852  000008e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00802014  00802014  000008fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000092c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004258  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f0f  00000000  00000000  00004d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012df  00000000  00000000  00007c23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000031c  00000000  00000000  00008f04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001fdf  00000000  00000000  00009220  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b8d  00000000  00000000  0000b1ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000bd8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
   8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
   c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  10:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  14:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  18:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  1c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  20:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  24:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  28:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  2c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  30:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  34:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  38:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  3c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  40:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  44:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  48:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  4c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  50:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  54:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  58:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  5c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  60:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  64:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  68:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  6c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  70:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  74:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  78:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  7c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  80:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  84:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  88:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  8c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  90:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  94:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  98:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  9c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  fc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 100:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 104:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 108:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 10c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 110:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 114:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 118:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 11c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 120:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 124:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 128:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 12c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 130:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 134:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 138:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 13c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 140:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 144:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 148:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 14c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 150:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 154:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 158:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 15c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 160:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 164:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 168:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 16c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 170:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 174:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 178:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 17c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 180:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 184:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 188:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 18c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 190:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 194:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 198:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 19c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
 208:	10 e2       	ldi	r17, 0x20	; 32
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e2       	ldi	r27, 0x20	; 32
 20e:	e2 e5       	ldi	r30, 0x52	; 82
 210:	f8 e0       	ldi	r31, 0x08	; 8
 212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
 214:	05 90       	lpm	r0, Z+
 216:	0d 92       	st	X+, r0
 218:	a4 31       	cpi	r26, 0x14	; 20
 21a:	b1 07       	cpc	r27, r17
 21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
 21e:	20 e2       	ldi	r18, 0x20	; 32
 220:	a4 e1       	ldi	r26, 0x14	; 20
 222:	b0 e2       	ldi	r27, 0x20	; 32
 224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
 226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
 228:	a2 32       	cpi	r26, 0x22	; 34
 22a:	b2 07       	cpc	r27, r18
 22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
 22e:	0e 94 bc 03 	call	0x778	; 0x778 <main>
 232:	0c 94 27 04 	jmp	0x84e	; 0x84e <_exit>

00000236 <__bad_interrupt>:
 236:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023a <fifthTube>:
	
	
}

void fifthTube(unsigned char byte)
{		   
 23a:	cf 93       	push	r28
	PORTD.OUTCLR = PIN2_bm;
 23c:	94 e0       	ldi	r25, 0x04	; 4
 23e:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	
	if(byte & 0x01)	//0001
 242:	80 fd       	sbrc	r24, 0
		PORTD.OUTSET = PIN2_bm;
 244:	90 93 65 06 	sts	0x0665, r25	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
		
	byte >>= 1;
 248:	c8 2f       	mov	r28, r24
 24a:	c6 95       	lsr	r28
	
	// clear pins 5-7
	sendData(0x07, 1);
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	87 e0       	ldi	r24, 0x07	; 7
 250:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendData>
	
	//write data to pins 5-7
	sendData(byte,0);
 254:	60 e0       	ldi	r22, 0x00	; 0
 256:	8c 2f       	mov	r24, r28
 258:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendData>
}
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <characterTube>:

void characterTube(unsigned char byte)
{
 260:	cf 93       	push	r28
 262:	c8 2f       	mov	r28, r24
	unsigned char i;//, tube;

	for(i = 0; i < MAPNUM; i++)
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	08 c0       	rjmp	.+16     	; 0x278 <characterTube+0x18>
	{
		if(byte == reMapBCDTube[i])
 268:	e8 2f       	mov	r30, r24
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	e0 50       	subi	r30, 0x00	; 0
 26e:	f0 4e       	sbci	r31, 0xE0	; 224
 270:	90 81       	ld	r25, Z
 272:	c9 17       	cp	r28, r25
 274:	21 f0       	breq	.+8      	; 0x27e <characterTube+0x1e>

void characterTube(unsigned char byte)
{
	unsigned char i;//, tube;

	for(i = 0; i < MAPNUM; i++)
 276:	8f 5f       	subi	r24, 0xFF	; 255
 278:	8a 30       	cpi	r24, 0x0A	; 10
 27a:	b0 f3       	brcs	.-20     	; 0x268 <characterTube+0x8>
 27c:	01 c0       	rjmp	.+2      	; 0x280 <characterTube+0x20>
	{
		if(byte == reMapBCDTube[i])
		{
			byte = i;
 27e:	c8 2f       	mov	r28, r24
			break;
		}
	}
	
	if(byte & 0x02)
 280:	c1 ff       	sbrs	r28, 1
 282:	04 c0       	rjmp	.+8      	; 0x28c <characterTube+0x2c>
		PORTC.OUTSET = PIN5_bm;
 284:	80 e2       	ldi	r24, 0x20	; 32
 286:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
 28a:	03 c0       	rjmp	.+6      	; 0x292 <characterTube+0x32>
	else
		PORTC.OUTCLR = PIN5_bm;
 28c:	80 e2       	ldi	r24, 0x20	; 32
 28e:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	
	sendData(0x18,1);
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	88 e1       	ldi	r24, 0x18	; 24
 296:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendData>
	
	if((byte & 0x04) || (byte & 0x08))
 29a:	c2 fd       	sbrc	r28, 2
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <characterTube+0x42>
 29e:	c3 ff       	sbrs	r28, 3
 2a0:	06 c0       	rjmp	.+12     	; 0x2ae <characterTube+0x4e>
	{
		//send to 2 for 0x08, send to pin 4 for 0x04
			sendData((byte & 0x0C) << 1, 0);
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	8c 2f       	mov	r24, r28
 2a6:	8c 70       	andi	r24, 0x0C	; 12
 2a8:	88 0f       	add	r24, r24
 2aa:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendData>
	}
		
	if(byte & 0x01)	//pin 3
 2ae:	c0 ff       	sbrs	r28, 0
 2b0:	04 c0       	rjmp	.+8      	; 0x2ba <characterTube+0x5a>
		PORTC.OUTSET = PIN4_bm;
 2b2:	80 e1       	ldi	r24, 0x10	; 16
 2b4:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
 2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <characterTube+0x60>
	else
		PORTC.OUTCLR = PIN4_bm;
 2ba:	80 e1       	ldi	r24, 0x10	; 16
 2bc:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
}
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <initDisplay>:
	
volatile unsigned char hour, minute;

void initDisplay()
{
	PORTC_DIR = FIRSTTUBE | SIXTHTUBEC | CHARTUBEIO;
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	PORTD_DIR = SIXTHTUBED | FIFTHTUBEIO;
 2ca:	97 e0       	ldi	r25, 0x07	; 7
 2cc:	90 93 60 06 	sts	0x0660, r25	; 0x800660 <__TEXT_REGION_LENGTH__+0x700660>
	PORTA_DIR = FOURTHTUBE | THIRDTUBE;
 2d0:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
	PORTB_DIR = SECONDTUBE;
 2d4:	8f e0       	ldi	r24, 0x0F	; 15
 2d6:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <__TEXT_REGION_LENGTH__+0x700620>
	
	PORTD_DIRSET = PIN4_bm;	// dot point
 2da:	80 e1       	ldi	r24, 0x10	; 16
 2dc:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
	
	characterTube(2);
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	0e 94 30 01 	call	0x260	; 0x260 <characterTube>
 2e6:	08 95       	ret

000002e8 <clearDisplay>:
}
// SEE IF FIFTHTUBE IS STILL BUGGED (FLASHING 1)
//set displays to display nothing
void clearDisplay()
{
	PORTC.OUT = TUBEOFF | (unsigned char)(TUBEOFF << 6);	//tube 1 and 6
 2e8:	8f ec       	ldi	r24, 0xCF	; 207
 2ea:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <__TEXT_REGION_LENGTH__+0x700644>
	
	PORTD.OUT &= PORTDPRESERVE;	//0xFC preserve all bits but first 2
 2ee:	e0 e6       	ldi	r30, 0x60	; 96
 2f0:	f6 e0       	ldi	r31, 0x06	; 6
 2f2:	84 81       	ldd	r24, Z+4	; 0x04
 2f4:	8c 7f       	andi	r24, 0xFC	; 252
 2f6:	84 83       	std	Z+4, r24	; 0x04
	PORTD.OUT |= TUBEOFF >> 2;	//part of tube 6 KILLS TUBE 6
 2f8:	84 81       	ldd	r24, Z+4	; 0x04
 2fa:	83 60       	ori	r24, 0x03	; 3
 2fc:	84 83       	std	Z+4, r24	; 0x04
	
	PORTB.OUT = TUBEOFF;	// tube 2	+1
 2fe:	8f e0       	ldi	r24, 0x0F	; 15
 300:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
	
	PORTA.OUT = (TUBEOFF << 4) | TUBEOFF; // tube 3 and 4
 304:	8f ef       	ldi	r24, 0xFF	; 255
 306:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
	
	fifthTube(TUBEOFF);	//tube 5
 30a:	8f e0       	ldi	r24, 0x0F	; 15
 30c:	0e 94 1d 01 	call	0x23a	; 0x23a <fifthTube>
	
	//character tube
	characterTube(TUBEOFF);
 310:	8f e0       	ldi	r24, 0x0F	; 15
 312:	0e 94 30 01 	call	0x260	; 0x260 <characterTube>
 316:	08 95       	ret

00000318 <display>:
	in format of "HHMMSS" Little-endian format
	
	unclean format to prevent flashing of cathode
*/
void display(unsigned char *number)
{
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	ec 01       	movw	r28, r24
	static unsigned char last_num;
	//unsigned char test = PORTD.OUT & 0xFC;
	
	PORTC.OUT = reMapBCD[*(number + 0)] | (reMapBCD[*(number + 5)] << 6);	//tube 1 and 6
 31e:	e8 81       	ld	r30, Y
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	e6 5f       	subi	r30, 0xF6	; 246
 324:	ff 4d       	sbci	r31, 0xDF	; 223
 326:	20 81       	ld	r18, Z
 328:	ed 81       	ldd	r30, Y+5	; 0x05
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	e6 5f       	subi	r30, 0xF6	; 246
 32e:	ff 4d       	sbci	r31, 0xDF	; 223
 330:	90 81       	ld	r25, Z
 332:	30 e4       	ldi	r19, 0x40	; 64
 334:	93 9f       	mul	r25, r19
 336:	c0 01       	movw	r24, r0
 338:	11 24       	eor	r1, r1
 33a:	82 2b       	or	r24, r18
 33c:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <__TEXT_REGION_LENGTH__+0x700644>
	
	PORTD.OUT &= PORTDPRESERVE;	//0xFC preserve all bits but first 2
 340:	a0 e6       	ldi	r26, 0x60	; 96
 342:	b6 e0       	ldi	r27, 0x06	; 6
 344:	14 96       	adiw	r26, 0x04	; 4
 346:	8c 91       	ld	r24, X
 348:	14 97       	sbiw	r26, 0x04	; 4
 34a:	8c 7f       	andi	r24, 0xFC	; 252
 34c:	14 96       	adiw	r26, 0x04	; 4
 34e:	8c 93       	st	X, r24
 350:	14 97       	sbiw	r26, 0x04	; 4
	PORTD.OUT |= (reMapBCD[*(number + 5)] >> 2);	//part of tube 6 KILLS TUBE 6
 352:	14 96       	adiw	r26, 0x04	; 4
 354:	9c 91       	ld	r25, X
 356:	14 97       	sbiw	r26, 0x04	; 4
 358:	ed 81       	ldd	r30, Y+5	; 0x05
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	e6 5f       	subi	r30, 0xF6	; 246
 35e:	ff 4d       	sbci	r31, 0xDF	; 223
 360:	80 81       	ld	r24, Z
 362:	86 95       	lsr	r24
 364:	86 95       	lsr	r24
 366:	89 2b       	or	r24, r25
 368:	14 96       	adiw	r26, 0x04	; 4
 36a:	8c 93       	st	X, r24
	
	PORTB.OUT = reMapBCD[*(number + 1)];	// tube 2	+1
 36c:	e9 81       	ldd	r30, Y+1	; 0x01
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	e6 5f       	subi	r30, 0xF6	; 246
 372:	ff 4d       	sbci	r31, 0xDF	; 223
 374:	80 81       	ld	r24, Z
 376:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
	
	PORTA.OUT = (reMapBCD[*(number + 2)]) << 4 | reMapBCD[*(number + 3)]; // tube 3 and 4
 37a:	ea 81       	ldd	r30, Y+2	; 0x02
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	e6 5f       	subi	r30, 0xF6	; 246
 380:	ff 4d       	sbci	r31, 0xDF	; 223
 382:	80 81       	ld	r24, Z
 384:	20 e1       	ldi	r18, 0x10	; 16
 386:	82 9f       	mul	r24, r18
 388:	c0 01       	movw	r24, r0
 38a:	11 24       	eor	r1, r1
 38c:	eb 81       	ldd	r30, Y+3	; 0x03
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	e6 5f       	subi	r30, 0xF6	; 246
 392:	ff 4d       	sbci	r31, 0xDF	; 223
 394:	90 81       	ld	r25, Z
 396:	89 2b       	or	r24, r25
 398:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
	
	//prevent flashing of 5th element '1'
	
	if(*(number + 4) != last_num)
 39c:	ec 81       	ldd	r30, Y+4	; 0x04
 39e:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <__data_end>
 3a2:	e8 17       	cp	r30, r24
 3a4:	31 f0       	breq	.+12     	; 0x3b2 <display+0x9a>
		fifthTube(reMapBCD[*(number + 4)]);	//tube 5
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	e6 5f       	subi	r30, 0xF6	; 246
 3aa:	ff 4d       	sbci	r31, 0xDF	; 223
 3ac:	80 81       	ld	r24, Z
 3ae:	0e 94 1d 01 	call	0x23a	; 0x23a <fifthTube>
		
	last_num = *(number + 4);
 3b2:	8c 81       	ldd	r24, Y+4	; 0x04
 3b4:	80 93 14 20 	sts	0x2014, r24	; 0x802014 <__data_end>
}
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	08 95       	ret

000003be <cathodeRefresh>:
/* Function:	cathodeRefresh

	Flashes all digits of the nixie tube to prevent cathode poisoning.
*/
void cathodeRefresh()
{
 3be:	ff 92       	push	r15
 3c0:	0f 93       	push	r16
 3c2:	1f 93       	push	r17
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	cd b7       	in	r28, 0x3d	; 61
 3ca:	de b7       	in	r29, 0x3e	; 62
 3cc:	26 97       	sbiw	r28, 0x06	; 6
 3ce:	cd bf       	out	0x3d, r28	; 61
 3d0:	de bf       	out	0x3e, r29	; 62
	unsigned char val[6] = {0};
 3d2:	fe 01       	movw	r30, r28
 3d4:	31 96       	adiw	r30, 0x01	; 1
 3d6:	86 e0       	ldi	r24, 0x06	; 6
 3d8:	df 01       	movw	r26, r30
 3da:	1d 92       	st	X+, r1
 3dc:	8a 95       	dec	r24
 3de:	e9 f7       	brne	.-6      	; 0x3da <cathodeRefresh+0x1c>
	unsigned char i, j;
	
	//flash numbers 0-9 on each digit
	for(i = 0; i < 10; i++)
 3e0:	10 e0       	ldi	r17, 0x00	; 0
 3e2:	1e c0       	rjmp	.+60     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	{
		for(j = 0; j < 6; j++)
		{
			val[j] = i;
 3e4:	e1 e0       	ldi	r30, 0x01	; 1
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	ec 0f       	add	r30, r28
 3ea:	fd 1f       	adc	r31, r29
 3ec:	e8 0f       	add	r30, r24
 3ee:	f1 1d       	adc	r31, r1
 3f0:	10 83       	st	Z, r17
	unsigned char i, j;
	
	//flash numbers 0-9 on each digit
	for(i = 0; i < 10; i++)
	{
		for(j = 0; j < 6; j++)
 3f2:	8f 5f       	subi	r24, 0xFF	; 255
 3f4:	01 c0       	rjmp	.+2      	; 0x3f8 <cathodeRefresh+0x3a>
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	86 30       	cpi	r24, 0x06	; 6
 3fa:	a0 f3       	brcs	.-24     	; 0x3e4 <cathodeRefresh+0x26>
		{
			val[j] = i;
		}
		display(val);
 3fc:	ce 01       	movw	r24, r28
 3fe:	01 96       	adiw	r24, 0x01	; 1
 400:	0e 94 8c 01 	call	0x318	; 0x318 <display>
		characterTube(reMapBCDTube[i]);
 404:	e1 2f       	mov	r30, r17
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	e0 50       	subi	r30, 0x00	; 0
 40a:	f0 4e       	sbci	r31, 0xE0	; 224
 40c:	80 81       	ld	r24, Z
 40e:	0e 94 30 01 	call	0x260	; 0x260 <characterTube>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 412:	ef e4       	ldi	r30, 0x4F	; 79
 414:	f3 ec       	ldi	r31, 0xC3	; 195
 416:	31 97       	sbiw	r30, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
{
	unsigned char val[6] = {0};
	unsigned char i, j;
	
	//flash numbers 0-9 on each digit
	for(i = 0; i < 10; i++)
 41e:	1f 5f       	subi	r17, 0xFF	; 255
 420:	1a 30       	cpi	r17, 0x0A	; 10
 422:	48 f3       	brcs	.-46     	; 0x3f6 <cathodeRefresh+0x38>
		characterTube(reMapBCDTube[i]);
		_delay_ms(200);
	}
	
	//turn off all digits
	clearDisplay();
 424:	0e 94 74 01 	call	0x2e8	; 0x2e8 <clearDisplay>
	
	// dot point in each tube
	DOTPOINTHIGH;
 428:	00 e6       	ldi	r16, 0x60	; 96
 42a:	16 e0       	ldi	r17, 0x06	; 6
 42c:	68 94       	set
 42e:	ff 24       	eor	r15, r15
 430:	f4 f8       	bld	r15, 4
 432:	d8 01       	movw	r26, r16
 434:	15 96       	adiw	r26, 0x05	; 5
 436:	fc 92       	st	X, r15
	characterTube('c');	//dummy write to protect displays
 438:	83 e6       	ldi	r24, 0x63	; 99
 43a:	0e 94 30 01 	call	0x260	; 0x260 <characterTube>
 43e:	ef e4       	ldi	r30, 0x4F	; 79
 440:	f3 ec       	ldi	r31, 0xC3	; 195
 442:	31 97       	sbiw	r30, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 446:	00 c0       	rjmp	.+0      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 448:	00 00       	nop
	_delay_ms(200);
	DOTPOINTLOW;
 44a:	d8 01       	movw	r26, r16
 44c:	16 96       	adiw	r26, 0x06	; 6
 44e:	fc 92       	st	X, r15
	//dummy write to protect displays
	display(0);
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 8c 01 	call	0x318	; 0x318 <display>
	characterTube(2);
 458:	82 e0       	ldi	r24, 0x02	; 2
 45a:	0e 94 30 01 	call	0x260	; 0x260 <characterTube>
	
	
}
 45e:	26 96       	adiw	r28, 0x06	; 6
 460:	cd bf       	out	0x3d, r28	; 61
 462:	de bf       	out	0x3e, r29	; 62
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	1f 91       	pop	r17
 46a:	0f 91       	pop	r16
 46c:	ff 90       	pop	r15
 46e:	08 95       	ret

00000470 <checkRefesh>:
	characterTube(2);
}

//check hours and if minute has passed once
void checkRefesh(unsigned char *time)
{
 470:	cf 93       	push	r28
 472:	df 93       	push	r29
 474:	ec 01       	movw	r28, r24
	static unsigned char last_min, last_hour;
	
	if(*(time + RTCHOUR) != last_hour)
 476:	9a 81       	ldd	r25, Y+2	; 0x02
 478:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <last_hour.3971>
 47c:	98 17       	cp	r25, r24
 47e:	71 f0       	breq	.+28     	; 0x49c <checkRefesh+0x2c>
	{
		last_min = *(time + RTCMINUTE);
 480:	89 81       	ldd	r24, Y+1	; 0x01
 482:	80 93 15 20 	sts	0x2015, r24	; 0x802015 <last_min.3970>
		
		while (*(rtc_get_time() + RTCMINUTE) == last_min)
 486:	02 c0       	rjmp	.+4      	; 0x48c <checkRefesh+0x1c>
		{
			cathodeRefresh();
 488:	0e 94 df 01 	call	0x3be	; 0x3be <cathodeRefresh>
	
	if(*(time + RTCHOUR) != last_hour)
	{
		last_min = *(time + RTCMINUTE);
		
		while (*(rtc_get_time() + RTCMINUTE) == last_min)
 48c:	0e 94 b6 02 	call	0x56c	; 0x56c <rtc_get_time>
 490:	fc 01       	movw	r30, r24
 492:	91 81       	ldd	r25, Z+1	; 0x01
 494:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <last_min.3970>
 498:	98 17       	cp	r25, r24
 49a:	b1 f3       	breq	.-20     	; 0x488 <checkRefesh+0x18>
		{
			cathodeRefresh();
		}
	}
	
	last_hour = *(time + RTCHOUR);
 49c:	8a 81       	ldd	r24, Y+2	; 0x02
 49e:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <last_hour.3971>
}
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <convertTime>:
		
	last_num = *(number + 4);
}

void convertTime(unsigned char *number)
{
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	cd b7       	in	r28, 0x3d	; 61
 4ae:	de b7       	in	r29, 0x3e	; 62
 4b0:	26 97       	sbiw	r28, 0x06	; 6
 4b2:	cd bf       	out	0x3d, r28	; 61
 4b4:	de bf       	out	0x3e, r29	; 62
 4b6:	dc 01       	movw	r26, r24
	unsigned char convert[6] = {0};
 4b8:	ae 01       	movw	r20, r28
 4ba:	4f 5f       	subi	r20, 0xFF	; 255
 4bc:	5f 4f       	sbci	r21, 0xFF	; 255
 4be:	86 e0       	ldi	r24, 0x06	; 6
 4c0:	fa 01       	movw	r30, r20
 4c2:	11 92       	st	Z+, r1
 4c4:	8a 95       	dec	r24
 4c6:	e9 f7       	brne	.-6      	; 0x4c2 <convertTime+0x1a>

	convert[4] = *(number) / 10;		//Ss
 4c8:	3c 91       	ld	r19, X
 4ca:	9d ec       	ldi	r25, 0xCD	; 205
 4cc:	39 9f       	mul	r19, r25
 4ce:	21 2d       	mov	r18, r1
 4d0:	11 24       	eor	r1, r1
 4d2:	26 95       	lsr	r18
 4d4:	26 95       	lsr	r18
 4d6:	26 95       	lsr	r18
 4d8:	2d 83       	std	Y+5, r18	; 0x05
	convert[5] = *(number) % 10;		//sS
 4da:	22 0f       	add	r18, r18
 4dc:	82 2f       	mov	r24, r18
 4de:	88 0f       	add	r24, r24
 4e0:	88 0f       	add	r24, r24
 4e2:	28 0f       	add	r18, r24
 4e4:	32 1b       	sub	r19, r18
 4e6:	3e 83       	std	Y+6, r19	; 0x06
	
	convert[2] = *(number + 1) / 10;	//Mm
 4e8:	11 96       	adiw	r26, 0x01	; 1
 4ea:	3c 91       	ld	r19, X
 4ec:	11 97       	sbiw	r26, 0x01	; 1
 4ee:	39 9f       	mul	r19, r25
 4f0:	21 2d       	mov	r18, r1
 4f2:	11 24       	eor	r1, r1
 4f4:	26 95       	lsr	r18
 4f6:	26 95       	lsr	r18
 4f8:	26 95       	lsr	r18
 4fa:	2b 83       	std	Y+3, r18	; 0x03
	convert[3] = *(number + 1) % 10;	//mM
 4fc:	22 0f       	add	r18, r18
 4fe:	82 2f       	mov	r24, r18
 500:	88 0f       	add	r24, r24
 502:	88 0f       	add	r24, r24
 504:	28 0f       	add	r18, r24
 506:	83 2f       	mov	r24, r19
 508:	82 1b       	sub	r24, r18
 50a:	8c 83       	std	Y+4, r24	; 0x04
	
	convert[0] = *(number + 2) / 10;	//Hh
 50c:	12 96       	adiw	r26, 0x02	; 2
 50e:	2c 91       	ld	r18, X
 510:	29 9f       	mul	r18, r25
 512:	91 2d       	mov	r25, r1
 514:	11 24       	eor	r1, r1
 516:	96 95       	lsr	r25
 518:	96 95       	lsr	r25
 51a:	96 95       	lsr	r25
 51c:	99 83       	std	Y+1, r25	; 0x01
	convert[1] = *(number + 2) % 10;	//hH
 51e:	99 0f       	add	r25, r25
 520:	89 2f       	mov	r24, r25
 522:	88 0f       	add	r24, r24
 524:	88 0f       	add	r24, r24
 526:	98 0f       	add	r25, r24
 528:	82 2f       	mov	r24, r18
 52a:	89 1b       	sub	r24, r25
 52c:	8a 83       	std	Y+2, r24	; 0x02

	//for cathodeRefresh/checkrefresh	BAD CODE
	minute = *(number + 1);
 52e:	30 93 20 20 	sts	0x2020, r19	; 0x802020 <minute>
	hour = *(number + 2);
 532:	20 93 21 20 	sts	0x2021, r18	; 0x802021 <hour>
	
	display(convert);
 536:	ca 01       	movw	r24, r20
 538:	0e 94 8c 01 	call	0x318	; 0x318 <display>
 53c:	26 96       	adiw	r28, 0x06	; 6
 53e:	cd bf       	out	0x3d, r28	; 61
 540:	de bf       	out	0x3e, r29	; 62
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	08 95       	ret

00000548 <rtc_init>:
#include "ds3231.h"
#include "i2c.h"

void rtc_init()
{
	PORTD.DIRCLR = PULSE;	//set to input
 548:	e0 e6       	ldi	r30, 0x60	; 96
 54a:	f6 e0       	ldi	r31, 0x06	; 6
 54c:	80 e2       	ldi	r24, 0x20	; 32
 54e:	82 83       	std	Z+2, r24	; 0x02
	PORTD.PIN5CTRL = PORT_OPC_PULLUP_gc;
 550:	88 e1       	ldi	r24, 0x18	; 24
 552:	85 8b       	std	Z+21, r24	; 0x15
 554:	08 95       	ret

00000556 <bcdToDec>:
}
*/

unsigned char bcdToDec(unsigned char convert)
{
	return ((convert / 16 * 10) + (convert % 16));
 556:	98 2f       	mov	r25, r24
 558:	92 95       	swap	r25
 55a:	9f 70       	andi	r25, 0x0F	; 15
 55c:	99 0f       	add	r25, r25
 55e:	29 2f       	mov	r18, r25
 560:	22 0f       	add	r18, r18
 562:	22 0f       	add	r18, r18
 564:	92 0f       	add	r25, r18
 566:	8f 70       	andi	r24, 0x0F	; 15
}
 568:	89 0f       	add	r24, r25
 56a:	08 95       	ret

0000056c <rtc_get_time>:

unsigned char* rtc_get_time()
{
 56c:	0f 93       	push	r16
 56e:	1f 93       	push	r17
 570:	cf 93       	push	r28
 572:	df 93       	push	r29
	static unsigned char time[8];
	char i;
	
	i2c_start();
 574:	0e 94 0f 03 	call	0x61e	; 0x61e <i2c_start>
	(void) i2c_device_id(ds3231,0);	//send address + write bit
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	88 e6       	ldi	r24, 0x68	; 104
 57c:	0e 94 25 03 	call	0x64a	; 0x64a <i2c_device_id>
	
	i2c_write(0);	//point to location i of DS3231
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	0e 94 a0 03 	call	0x740	; 0x740 <i2c_write>
	
	i2c_start();
 586:	0e 94 0f 03 	call	0x61e	; 0x61e <i2c_start>
	
	(void) i2c_device_id(ds3231, 1);	//send address + read bit
 58a:	61 e0       	ldi	r22, 0x01	; 1
 58c:	88 e6       	ldi	r24, 0x68	; 104
 58e:	0e 94 25 03 	call	0x64a	; 0x64a <i2c_device_id>
	
	for(i = 0; i < 7; i++)
 592:	c0 e0       	ldi	r28, 0x00	; 0
 594:	0c c0       	rjmp	.+24     	; 0x5ae <rtc_get_time+0x42>
	{
			time[i] = bcdToDec(i2c_read(0));
 596:	0c 2f       	mov	r16, r28
 598:	10 e0       	ldi	r17, 0x00	; 0
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <i2c_read>
 5a0:	0e 94 ab 02 	call	0x556	; 0x556 <bcdToDec>
 5a4:	f8 01       	movw	r30, r16
 5a6:	e9 5e       	subi	r30, 0xE9	; 233
 5a8:	ff 4d       	sbci	r31, 0xDF	; 223
 5aa:	80 83       	st	Z, r24
	
	i2c_start();
	
	(void) i2c_device_id(ds3231, 1);	//send address + read bit
	
	for(i = 0; i < 7; i++)
 5ac:	cf 5f       	subi	r28, 0xFF	; 255
 5ae:	c7 30       	cpi	r28, 0x07	; 7
 5b0:	90 f3       	brcs	.-28     	; 0x596 <rtc_get_time+0x2a>
	{
			time[i] = bcdToDec(i2c_read(0));
	}
	time[i] = bcdToDec(i2c_read(1));	//set to not ack when 6th loop
 5b2:	d0 e0       	ldi	r29, 0x00	; 0
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	0e 94 74 03 	call	0x6e8	; 0x6e8 <i2c_read>
 5ba:	0e 94 ab 02 	call	0x556	; 0x556 <bcdToDec>
 5be:	c9 5e       	subi	r28, 0xE9	; 233
 5c0:	df 4d       	sbci	r29, 0xDF	; 223
 5c2:	88 83       	st	Y, r24
	
	i2c_stop();
 5c4:	0e 94 1a 03 	call	0x634	; 0x634 <i2c_stop>
	return time;
}
 5c8:	87 e1       	ldi	r24, 0x17	; 23
 5ca:	90 e2       	ldi	r25, 0x20	; 32
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	1f 91       	pop	r17
 5d2:	0f 91       	pop	r16
 5d4:	08 95       	ret

000005d6 <rtc_ctrl>:

void rtc_ctrl(unsigned char mask)
{	
 5d6:	cf 93       	push	r28
 5d8:	c8 2f       	mov	r28, r24
	i2c_start();
 5da:	0e 94 0f 03 	call	0x61e	; 0x61e <i2c_start>
	
	i2c_device_id(ds3231, 0);
 5de:	60 e0       	ldi	r22, 0x00	; 0
 5e0:	88 e6       	ldi	r24, 0x68	; 104
 5e2:	0e 94 25 03 	call	0x64a	; 0x64a <i2c_device_id>
	
	i2c_write(CONTROL);
 5e6:	8e e0       	ldi	r24, 0x0E	; 14
 5e8:	0e 94 a0 03 	call	0x740	; 0x740 <i2c_write>
	
	//i2c_start();
	//i2c_device_id(ds3231, 1);
	i2c_write(mask);
 5ec:	8c 2f       	mov	r24, r28
 5ee:	0e 94 a0 03 	call	0x740	; 0x740 <i2c_write>
	
	i2c_stop();
 5f2:	0e 94 1a 03 	call	0x634	; 0x634 <i2c_stop>
}
 5f6:	cf 91       	pop	r28
 5f8:	08 95       	ret

000005fa <init_i2c>:

#include "i2c.h"

void init_i2c()
{
	PORTE_DIRSET = PIN0_bm;	//SDA output
 5fa:	e1 e8       	ldi	r30, 0x81	; 129
 5fc:	f6 e0       	ldi	r31, 0x06	; 6
 5fe:	91 e0       	ldi	r25, 0x01	; 1
 600:	90 83       	st	Z, r25
	PORTE_DIRSET = PIN1_bm;	//SCL output
 602:	82 e0       	ldi	r24, 0x02	; 2
 604:	80 83       	st	Z, r24
	
	//DDRB |= (1 << PB0);	// Set SDA as output
	//DDRB |= (1 << PB2);	// Set SCL as output
	
	SDA_HIGH;
 606:	e0 e8       	ldi	r30, 0x80	; 128
 608:	f6 e0       	ldi	r31, 0x06	; 6
 60a:	95 83       	std	Z+5, r25	; 0x05
	SCL_HIGH;
 60c:	85 83       	std	Z+5, r24	; 0x05
 60e:	08 95       	ret

00000610 <i2c_clock>:
}

void i2c_clock()
{
	SCL_HIGH;
 610:	e0 e8       	ldi	r30, 0x80	; 128
 612:	f6 e0       	ldi	r31, 0x06	; 6
 614:	82 e0       	ldi	r24, 0x02	; 2
 616:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 618:	00 00       	nop
	_delay_us(TIME);
	SCL_LOW;
 61a:	86 83       	std	Z+6, r24	; 0x06
 61c:	08 95       	ret

0000061e <i2c_start>:
}

void i2c_start()
{
	//Clock stays high and SDA pulled low
	SDA_HIGH;
 61e:	e0 e8       	ldi	r30, 0x80	; 128
 620:	f6 e0       	ldi	r31, 0x06	; 6
 622:	91 e0       	ldi	r25, 0x01	; 1
 624:	95 83       	std	Z+5, r25	; 0x05
	SCL_HIGH;
 626:	82 e0       	ldi	r24, 0x02	; 2
 628:	85 83       	std	Z+5, r24	; 0x05
 62a:	00 00       	nop

	_delay_us(TIME);
	SDA_LOW;
 62c:	96 83       	std	Z+6, r25	; 0x06
 62e:	00 00       	nop
	_delay_us(TIME);
	SCL_LOW;
 630:	86 83       	std	Z+6, r24	; 0x06
 632:	08 95       	ret

00000634 <i2c_stop>:
}

void i2c_stop()
{
	//clock goes low before data
	SCL_LOW;
 634:	e0 e8       	ldi	r30, 0x80	; 128
 636:	f6 e0       	ldi	r31, 0x06	; 6
 638:	92 e0       	ldi	r25, 0x02	; 2
 63a:	96 83       	std	Z+6, r25	; 0x06
	SDA_LOW;
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	86 83       	std	Z+6, r24	; 0x06
 640:	00 00       	nop
	_delay_us(TIME);

	SCL_HIGH;
 642:	95 83       	std	Z+5, r25	; 0x05
 644:	00 00       	nop
	_delay_us(TIME);
	SDA_HIGH;
 646:	85 83       	std	Z+5, r24	; 0x05
 648:	08 95       	ret

0000064a <i2c_device_id>:
}

char i2c_device_id(volatile char id, volatile char rw)
{
 64a:	ef 92       	push	r14
 64c:	ff 92       	push	r15
 64e:	0f 93       	push	r16
 650:	1f 93       	push	r17
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	00 d0       	rcall	.+0      	; 0x658 <i2c_device_id+0xe>
 658:	cd b7       	in	r28, 0x3d	; 61
 65a:	de b7       	in	r29, 0x3e	; 62
 65c:	89 83       	std	Y+1, r24	; 0x01
 65e:	6a 83       	std	Y+2, r22	; 0x02
	char i, ACK;
	//id = 0x77;//0x76;//0x3C;//78;

	//check if valid i2c address
	if(id < 8 || id > 120)
 660:	89 81       	ldd	r24, Y+1	; 0x01
 662:	88 30       	cpi	r24, 0x08	; 8
 664:	a8 f1       	brcs	.+106    	; 0x6d0 <i2c_device_id+0x86>
 666:	89 81       	ldd	r24, Y+1	; 0x01
 668:	89 37       	cpi	r24, 0x79	; 121
 66a:	a0 f5       	brcc	.+104    	; 0x6d4 <i2c_device_id+0x8a>
 66c:	17 e0       	ldi	r17, 0x07	; 7
 66e:	10 c0       	rjmp	.+32     	; 0x690 <i2c_device_id+0x46>
		return 2;

	//Starting at 7 to avoid last bit
	for(i = 7; i > 0; i--)
	{
		id <<= 1;
 670:	89 81       	ldd	r24, Y+1	; 0x01
 672:	88 0f       	add	r24, r24
 674:	89 83       	std	Y+1, r24	; 0x01
		if((id & 0x80))
 676:	89 81       	ldd	r24, Y+1	; 0x01
 678:	88 23       	and	r24, r24
 67a:	24 f4       	brge	.+8      	; 0x684 <i2c_device_id+0x3a>
			SDA_HIGH;
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
 682:	03 c0       	rjmp	.+6      	; 0x68a <i2c_device_id+0x40>
		else
			SDA_LOW;
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
		//SDA = id & 0x80;	//Sends a 1 or 0 to SDA

		//Pulses the clock
		i2c_clock();
 68a:	0e 94 08 03 	call	0x610	; 0x610 <i2c_clock>
	//check if valid i2c address
	if(id < 8 || id > 120)
		return 2;

	//Starting at 7 to avoid last bit
	for(i = 7; i > 0; i--)
 68e:	11 50       	subi	r17, 0x01	; 1
 690:	11 11       	cpse	r17, r1
 692:	ee cf       	rjmp	.-36     	; 0x670 <i2c_device_id+0x26>
		i2c_clock();
	}
	//8th bit. pulses the read/write bit
	//rw low for write and high for read

	if(rw == 1)
 694:	8a 81       	ldd	r24, Y+2	; 0x02
 696:	81 30       	cpi	r24, 0x01	; 1
 698:	19 f4       	brne	.+6      	; 0x6a0 <i2c_device_id+0x56>
		SDA_HIGH;
 69a:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
 69e:	03 c0       	rjmp	.+6      	; 0x6a6 <i2c_device_id+0x5c>
	else
		SDA_LOW;
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
	i2c_clock();
 6a6:	0e 94 08 03 	call	0x610	; 0x610 <i2c_clock>
	//SDA = rw;
	
	//9th bit
	//set SDA to input
	PORTE.DIRCLR = PIN0_bm;
 6aa:	0f 2e       	mov	r0, r31
 6ac:	f0 e8       	ldi	r31, 0x80	; 128
 6ae:	ef 2e       	mov	r14, r31
 6b0:	f6 e0       	ldi	r31, 0x06	; 6
 6b2:	ff 2e       	mov	r15, r31
 6b4:	f0 2d       	mov	r31, r0
 6b6:	01 e0       	ldi	r16, 0x01	; 1
 6b8:	f7 01       	movw	r30, r14
 6ba:	02 83       	std	Z+2, r16	; 0x02
	//DDRB &= ~(1 << PB0);	//set pin0 to input; turn off pin
	SDA_HIGH;//PORTB |= (1 << PB0);	//enable pull up; turn on pin
 6bc:	05 83       	std	Z+5, r16	; 0x05
	ACK = (PORTE.IN & PIN0_bm); //(PINB & (1 << PB0));	//read pin
 6be:	80 85       	ldd	r24, Z+8	; 0x08
 6c0:	18 2f       	mov	r17, r24
 6c2:	11 70       	andi	r17, 0x01	; 1

	i2c_clock();
 6c4:	0e 94 08 03 	call	0x610	; 0x610 <i2c_clock>
	
	PORTE.DIRSET = PIN0_bm;
 6c8:	f7 01       	movw	r30, r14
 6ca:	01 83       	std	Z+1, r16	; 0x01
	//DDRB |= (1 << PB0);	//set pin0 to output

	return ACK;
 6cc:	81 2f       	mov	r24, r17
 6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <i2c_device_id+0x8c>
	char i, ACK;
	//id = 0x77;//0x76;//0x3C;//78;

	//check if valid i2c address
	if(id < 8 || id > 120)
		return 2;
 6d0:	82 e0       	ldi	r24, 0x02	; 2
 6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <i2c_device_id+0x8c>
 6d4:	82 e0       	ldi	r24, 0x02	; 2
	
	PORTE.DIRSET = PIN0_bm;
	//DDRB |= (1 << PB0);	//set pin0 to output

	return ACK;
}
 6d6:	0f 90       	pop	r0
 6d8:	0f 90       	pop	r0
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	1f 91       	pop	r17
 6e0:	0f 91       	pop	r16
 6e2:	ff 90       	pop	r15
 6e4:	ef 90       	pop	r14
 6e6:	08 95       	ret

000006e8 <i2c_read>:

unsigned char i2c_read(char last_byte)
{
 6e8:	1f 93       	push	r17
 6ea:	cf 93       	push	r28
 6ec:	df 93       	push	r29
 6ee:	18 2f       	mov	r17, r24
	char i = 0, byte = 0;
	SDA_HIGH;
 6f0:	e0 e8       	ldi	r30, 0x80	; 128
 6f2:	f6 e0       	ldi	r31, 0x06	; 6
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	85 83       	std	Z+5, r24	; 0x05
	
	PORTE.DIRCLR = PIN0_bm;
 6f8:	82 83       	std	Z+2, r24	; 0x02
	//DDRB &= ~(1 << PB0);	//set pin0 to input; turn off pin
	SDA_HIGH;				//enable pull up; turn on pin
 6fa:	85 83       	std	Z+5, r24	; 0x05
	return ACK;
}

unsigned char i2c_read(char last_byte)
{
	char i = 0, byte = 0;
 6fc:	c0 e0       	ldi	r28, 0x00	; 0
	
	PORTE.DIRCLR = PIN0_bm;
	//DDRB &= ~(1 << PB0);	//set pin0 to input; turn off pin
	SDA_HIGH;				//enable pull up; turn on pin
	
	for(i = 8; i > 0; i--)
 6fe:	d8 e0       	ldi	r29, 0x08	; 8
 700:	0b c0       	rjmp	.+22     	; 0x718 <i2c_read+0x30>
	{	
		SCL_HIGH;
 702:	e0 e8       	ldi	r30, 0x80	; 128
 704:	f6 e0       	ldi	r31, 0x06	; 6
 706:	82 e0       	ldi	r24, 0x02	; 2
 708:	85 83       	std	Z+5, r24	; 0x05
		//bitshift byte by 1
		byte <<= 1;
 70a:	cc 0f       	add	r28, r28

		//read pin
		
		//OR byte bit with SDA
		byte |= PORTE.IN & PIN0_bm;//(PINB & (1<<PB0));
 70c:	80 85       	ldd	r24, Z+8	; 0x08
 70e:	81 70       	andi	r24, 0x01	; 1
 710:	c8 2b       	or	r28, r24

		i2c_clock();
 712:	0e 94 08 03 	call	0x610	; 0x610 <i2c_clock>
	
	PORTE.DIRCLR = PIN0_bm;
	//DDRB &= ~(1 << PB0);	//set pin0 to input; turn off pin
	SDA_HIGH;				//enable pull up; turn on pin
	
	for(i = 8; i > 0; i--)
 716:	d1 50       	subi	r29, 0x01	; 1
 718:	d1 11       	cpse	r29, r1
 71a:	f3 cf       	rjmp	.-26     	; 0x702 <i2c_read+0x1a>
		//OR byte bit with SDA
		byte |= PORTE.IN & PIN0_bm;//(PINB & (1<<PB0));

		i2c_clock();
	}
	PORTE.DIRSET = PIN0_bm;
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
	//DDRB |= (1 << PB0);	//set pin0 to output
	
	//9th bit master acknowledges data transfer or indicates last byte
	if(last_byte == 1)
 722:	11 30       	cpi	r17, 0x01	; 1
 724:	19 f4       	brne	.+6      	; 0x72c <i2c_read+0x44>
		SDA_HIGH;
 726:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
 72a:	03 c0       	rjmp	.+6      	; 0x732 <i2c_read+0x4a>
	else
		SDA_LOW;
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
	//SDA = last_byte;
	
	i2c_clock();
 732:	0e 94 08 03 	call	0x610	; 0x610 <i2c_clock>
	
	return byte;
}
 736:	8c 2f       	mov	r24, r28
 738:	df 91       	pop	r29
 73a:	cf 91       	pop	r28
 73c:	1f 91       	pop	r17
 73e:	08 95       	ret

00000740 <i2c_write>:

void i2c_write(unsigned char byte)
{
 740:	cf 93       	push	r28
 742:	df 93       	push	r29
 744:	d8 2f       	mov	r29, r24
	char i;
	for(i = 8; i > 0; i--)
 746:	c8 e0       	ldi	r28, 0x08	; 8
 748:	0d c0       	rjmp	.+26     	; 0x764 <i2c_write+0x24>
	{
		//bit shifts data by i and ANDs it to convert it to boolean
		if((byte & 0x80))
 74a:	dd 23       	and	r29, r29
 74c:	24 f4       	brge	.+8      	; 0x756 <i2c_write+0x16>
			SDA_HIGH;
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
 754:	03 c0       	rjmp	.+6      	; 0x75c <i2c_write+0x1c>
		else
			SDA_LOW;
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
		//SDA = byte & 0x80;	//Sends a 1 or 0 to SDA
		
		//pulse the clock
		i2c_clock();
 75c:	0e 94 08 03 	call	0x610	; 0x610 <i2c_clock>
		
		byte <<= 1;
 760:	dd 0f       	add	r29, r29
}

void i2c_write(unsigned char byte)
{
	char i;
	for(i = 8; i > 0; i--)
 762:	c1 50       	subi	r28, 0x01	; 1
 764:	c1 11       	cpse	r28, r1
 766:	f1 cf       	rjmp	.-30     	; 0x74a <i2c_write+0xa>
		
		byte <<= 1;
	}
	
	//set to high to detect ack bit
	SDA_HIGH;
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
	
	i2c_clock();
 76e:	0e 94 08 03 	call	0x610	; 0x610 <i2c_clock>

}
 772:	df 91       	pop	r29
 774:	cf 91       	pop	r28
 776:	08 95       	ret

00000778 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 778:	2f e3       	ldi	r18, 0x3F	; 63
 77a:	8d e0       	ldi	r24, 0x0D	; 13
 77c:	93 e0       	ldi	r25, 0x03	; 3
 77e:	21 50       	subi	r18, 0x01	; 1
 780:	80 40       	sbci	r24, 0x00	; 0
 782:	90 40       	sbci	r25, 0x00	; 0
 784:	e1 f7       	brne	.-8      	; 0x77e <main+0x6>
 786:	00 c0       	rjmp	.+0      	; 0x788 <main+0x10>
 788:	00 00       	nop
	
	const unsigned char time[7] = {0,42,1,1,14,10,19}; //{seconds,minutes,hour,weekday,day,month,year};
	unsigned char *test;
	_delay_ms(500);	//delay to let voltage stabalise
	
	initDisplay();
 78a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <initDisplay>
	
	initShiftReg();
 78e:	0e 94 1c 04 	call	0x838	; 0x838 <initShiftReg>
	init_i2c();
 792:	0e 94 fd 02 	call	0x5fa	; 0x5fa <init_i2c>
	rtc_init();
 796:	0e 94 a4 02 	call	0x548	; 0x548 <rtc_init>
	//sht_init();
	
	// set square wave to 1Hz, enable squarewave output
	rtc_ctrl(0x00);
 79a:	80 e0       	ldi	r24, 0x00	; 0
 79c:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <rtc_ctrl>
	
	sendData(LAMPHH | LAMPMM | LAMPAMPM, 0);
 7a0:	60 e0       	ldi	r22, 0x00	; 0
 7a2:	80 ee       	ldi	r24, 0xE0	; 224
 7a4:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendData>
	
	clearDisplay();
 7a8:	0e 94 74 01 	call	0x2e8	; 0x2e8 <clearDisplay>
	//rtc_convert_time(time);
	//unsigned char i = 0;
    while (1) 
    {	

		if(PORTD.IN & PULSE)	//check if 1 second has passed
 7ac:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
 7b0:	85 ff       	sbrs	r24, 5
 7b2:	fc cf       	rjmp	.-8      	; 0x7ac <main+0x34>
 7b4:	8f e4       	ldi	r24, 0x4F	; 79
 7b6:	93 ec       	ldi	r25, 0xC3	; 195
 7b8:	01 97       	sbiw	r24, 0x01	; 1
 7ba:	f1 f7       	brne	.-4      	; 0x7b8 <main+0x40>
 7bc:	00 c0       	rjmp	.+0      	; 0x7be <main+0x46>
 7be:	00 00       	nop
		{
			//print_float(sht_temp());
			//print_float(sht_humidity());
			_delay_ms(100);
			
			test = rtc_get_time();
 7c0:	0e 94 b6 02 	call	0x56c	; 0x56c <rtc_get_time>
 7c4:	ec 01       	movw	r28, r24
				//clearDisplay();
		//	}
			//else
			//{
				//cathodeRefresh();
				convertTime(test);
 7c6:	0e 94 54 02 	call	0x4a8	; 0x4a8 <convertTime>
				
				checkRefesh(test);	// flash screen every hour
 7ca:	ce 01       	movw	r24, r28
 7cc:	0e 94 38 02 	call	0x470	; 0x470 <checkRefesh>
 7d0:	ed cf       	rjmp	.-38     	; 0x7ac <main+0x34>

000007d2 <sendData>:
void sendData(unsigned char byte, unsigned char bit)
{
	unsigned char i;
	static unsigned char last_command;	// keeps track of set bits in shift register
	
	if(bit)
 7d2:	66 23       	and	r22, r22
 7d4:	41 f0       	breq	.+16     	; 0x7e6 <sendData+0x14>
	{
		/* invert byte then AND with the last_command, preserving contents of 
		last_command so only set pins become cleared*/
		last_command &= ~byte;
 7d6:	80 95       	com	r24
 7d8:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <last_command.3938>
 7dc:	89 23       	and	r24, r25
 7de:	80 93 1f 20 	sts	0x201F, r24	; 0x80201f <last_command.3938>
				
	E.G.	sendData(0x01, 0) turns ON the 8th bit of the shift register
			sendData(0x01, 1) clears the 8th bit in the shift register
*/
void sendData(unsigned char byte, unsigned char bit)
{
 7e2:	20 e0       	ldi	r18, 0x00	; 0
 7e4:	1d c0       	rjmp	.+58     	; 0x820 <sendData+0x4e>
		byte = last_command;	//byte is destructive, so copy
	}
	else
	{
		//copy byte data into last_command
		last_command |= byte;
 7e6:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <last_command.3938>
 7ea:	98 2b       	or	r25, r24
 7ec:	90 93 1f 20 	sts	0x201F, r25	; 0x80201f <last_command.3938>
	
		//copy last_commands data back into byte
		byte |= last_command;
 7f0:	89 2b       	or	r24, r25
 7f2:	f7 cf       	rjmp	.-18     	; 0x7e2 <sendData+0x10>
	}
	
	// send byte to shift register, Big-endian
	for (i = 0; i < 8; i++)
	{
		if((byte & 0x01))	//read first bit
 7f4:	80 ff       	sbrs	r24, 0
 7f6:	03 c0       	rjmp	.+6      	; 0x7fe <sendData+0x2c>
			PORTE.OUTSET = SHIFTDATA;	//Set DATA pin to HIGH
 7f8:	98 e0       	ldi	r25, 0x08	; 8
 7fa:	90 93 85 06 	sts	0x0685, r25	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
			
		PORTD.OUTSET = SHIFTCLK;	//set CLK pin to HIGH
 7fe:	e0 e6       	ldi	r30, 0x60	; 96
 800:	f6 e0       	ldi	r31, 0x06	; 6
 802:	98 e0       	ldi	r25, 0x08	; 8
 804:	95 83       	std	Z+5, r25	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 806:	33 e0       	ldi	r19, 0x03	; 3
 808:	3a 95       	dec	r19
 80a:	f1 f7       	brne	.-4      	; 0x808 <sendData+0x36>
 80c:	00 00       	nop
		_delay_us(10);
		
		PORTE.OUTCLR = SHIFTDATA;	//Set DATA pin to LOW
 80e:	90 93 86 06 	sts	0x0686, r25	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
		PORTD.OUTCLR = SHIFTCLK;	//set CLK pin to LOW
 812:	96 83       	std	Z+6, r25	; 0x06
 814:	93 e0       	ldi	r25, 0x03	; 3
 816:	9a 95       	dec	r25
 818:	f1 f7       	brne	.-4      	; 0x816 <sendData+0x44>
 81a:	00 00       	nop
		_delay_us(10);
		
		byte >>= 1;	// shift all bits down, removing first bit
 81c:	86 95       	lsr	r24
		//copy last_commands data back into byte
		byte |= last_command;
	}
	
	// send byte to shift register, Big-endian
	for (i = 0; i < 8; i++)
 81e:	2f 5f       	subi	r18, 0xFF	; 255
 820:	28 30       	cpi	r18, 0x08	; 8
 822:	40 f3       	brcs	.-48     	; 0x7f4 <sendData+0x22>
		_delay_us(10);
		
		byte >>= 1;	// shift all bits down, removing first bit
	}
	// tell shift register to activate
	PORTE.OUTSET = LATCH;
 824:	e0 e8       	ldi	r30, 0x80	; 128
 826:	f6 e0       	ldi	r31, 0x06	; 6
 828:	84 e0       	ldi	r24, 0x04	; 4
 82a:	85 83       	std	Z+5, r24	; 0x05
 82c:	33 e0       	ldi	r19, 0x03	; 3
 82e:	3a 95       	dec	r19
 830:	f1 f7       	brne	.-4      	; 0x82e <sendData+0x5c>
 832:	00 00       	nop
	_delay_us(10);
	PORTE.OUTCLR = LATCH;
 834:	86 83       	std	Z+6, r24	; 0x06
 836:	08 95       	ret

00000838 <initShiftReg>:
#include <avr/io.h>
#include <util/delay.h>

void initShiftReg()
{
	PORTD.DIRSET = SHIFTCLK;	//set SHIFTCLK pin to output
 838:	88 e0       	ldi	r24, 0x08	; 8
 83a:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
	PORTE.DIRSET = LATCH | SHIFTDATA;	//set SHIFTCLK pin to output
 83e:	8c e0       	ldi	r24, 0x0C	; 12
 840:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
	sendData(0xFF, 1);	// ensure shift register is in known state
 844:	61 e0       	ldi	r22, 0x01	; 1
 846:	8f ef       	ldi	r24, 0xFF	; 255
 848:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendData>
 84c:	08 95       	ret

0000084e <_exit>:
 84e:	f8 94       	cli

00000850 <__stop_program>:
 850:	ff cf       	rjmp	.-2      	; 0x850 <__stop_program>
